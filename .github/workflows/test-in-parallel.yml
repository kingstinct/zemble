# This is a basic workflow to help you get started with Actions

name: Test in Parallel

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      parellelism_count:
        description: The number of test pipelines to run in parallel
        required: false
        type: string
        default: "4"
      test_command:
        required: false
        type: string
        default: npx jest
        description: The command to run in each test pipeline
      package_manager:
        required: false
        type: string
        default: pnpm
        description: The package manager to use
      working_directory:
        required: false
        type: string
        default: .
        description: The working directory to run the tests in
      pnpm_version:
        required: false
        type: string
        default: "8"
        description: If using pnpm - which version to use
      env_file:
        required: false
        type: string
        description: The environment file to use
      op_setup_script:
        required: false
        type: string
        description: The script to setup the test variables
  workflow_call:
    inputs:
      parellelism_count:
        required: false
        type: number
        default: 4
      test_command:
        required: false
        type: string
        default: npx jest
      env_file:
        required: false
        type: string
        description: The environment file to use
      package_manager:
        required: false
        type: string
        default: pnpm
      working_directory:
        required: false
        type: string
        default: .
      pnpm_version:
        required: false
        type: string
        default: "8"
        description: If using pnpm - which version to use
      op_setup_script:
        required: false
        type: string
        description: The script to setup the test variables
    secrets:
      SLACK_WEBHOOK:
        description: The Slack Webhook to use for notifications
        required: false
      DISCORD_WEBHOOK:
        description: The Discord Webhook to use for notifications
        required: false
      OP_SERVICE_ACCOUNT_TOKEN:
        description: The 1Password Service Account Token
        required: false
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 2

    outputs:
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      test-chunk-ids: ${{ steps['set-test-chunk-ids'].outputs['test-chunk-ids'] }}

    steps:
      - uses: actions/checkout@v4

      - uses: cardinalby/export-env-action@v2
        if: ${{ inputs.env_file }}
        with:
          envFile: ${{ inputs.env_file }}

      - uses: pnpm/action-setup@v3
        if: ${{ inputs.package_manager == 'pnpm' }}
        with:
          version: ${{ inputs.pnpm_version }}

      - uses: oven-sh/setup-bun@v2
        if: ${{ inputs.package_manager == 'bun' }}
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - uses: actions/setup-node@v4
        if: ${{ env.ACT && inputs.package_manager != 'bun' }}
        with:
          node-version-file: .nvmrc

      - uses: actions/setup-node@v4
        if: ${{ !env.ACT && inputs.package_manager != 'bun' }}
        with:
          node-version-file: .nvmrc
          cache: ${{ inputs.package_manager }}

      - name: Install dependencies (npm)
        run: npm ci
        if: ${{ inputs.package_manager == 'npm' }}

      - name: Install dependencies (others)
        run: ${{ inputs.package_manager }} install --frozen-lockfile
        if: ${{ inputs.package_manager != 'npm' }}

      - id: set-test-chunks
        name: Set Chunks
        run: echo "test-chunks=$(npx jest --listTests --json | jq -cM '[_nwise(length / ${{ inputs.parellelism_count }} | ceil)]')" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.working_directory }}

      - id: set-test-chunk-ids
        name: Set Chunk IDs
        run: echo "test-chunk-ids=$(echo $CHUNKS | jq -cM 'to_entries | map(.key)')" >> $GITHUB_OUTPUT
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: test (chunk ${{ matrix.chunk }})
    needs: setup
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    strategy:
      matrix:
        chunk: ${{ fromJson(needs.setup.outputs['test-chunk-ids']) }}

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        if: ${{ inputs.package_manager == 'pnpm' }}
        with:
          version: ${{ inputs.pnpm_version }}

      - uses: cardinalby/export-env-action@v2
        if: ${{ inputs.env_file }}
        with:
          envFile: ${{ inputs.env_file }}

      - uses: oven-sh/setup-bun@v2
        if: ${{ inputs.package_manager == 'bun' }}
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        if: ${{ env.ACT && inputs.package_manager != 'bun' }}
        with:
          node-version-file: .nvmrc

      - name: Setup Node and Cache
        uses: actions/setup-node@v4
        if: ${{ !env.ACT && inputs.package_manager != 'bun' }}
        with:
          node-version-file: .nvmrc
          cache: ${{ inputs.package_manager }}

      - name: Install dependencies (npm)
        run: npm ci
        if: ${{ inputs.package_manager == 'npm' }}

      - name: Install dependencies (others)
        run: ${{ inputs.package_manager }} install --frozen-lockfile
        if: ${{ inputs.package_manager != 'npm' }}

      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1
        if: ${{ inputs.op_setup_script }}

      - name: Load secret
        uses: 1password/load-secrets-action/configure@v2
        if: ${{ inputs.op_setup_script }}
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: generate env file
        run: ${{ inputs.op_setup_script }}
        if: ${{ inputs.op_setup_script }}

      - name: Test
        run: echo $CHUNKS | jq '.[${{ matrix.chunk }}] | .[] | @text' | xargs ${{ inputs.test_command }}
        working-directory: ${{ inputs.working_directory }}
        env:
          CHUNKS: ${{ needs.setup.outputs['test-chunks'] }}
          NODE_OPTIONS: --max-old-space-size=4096

      - uses: sarisia/actions-status-discord@v1
        if: ${{ failure() && env.DISCORD_WEBHOOK }}
        with:
          webhook: ${{ env.DISCORD_WEBHOOK }}

      - uses: rtCamp/action-slack-notify@v2
        if: ${{ failure() && env.SLACK_WEBHOOK }}

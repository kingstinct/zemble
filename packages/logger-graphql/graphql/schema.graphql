scalar JSONObject

directive @stream on FIELD_DEFINITION | FIELD

input AuthOr {
  includes: JSONObject
  match: JSONObject
}

directive @auth(match: JSONObject, skip: Boolean, includes: JSONObject, or: [AuthOr!]) on FIELD_DEFINITION

enum LogLevel {
  fatal
  error
  warn
  info
  debug
  trace
  silent
}

type Query {
  # not getting the log streaming to work currently, not quite sure why
  logs: [LogOutput!]!
    @auth(
      or: [
        { includes: { permissions: "@zemble/logger-graphql" } }
        { includes: { permissions: "@zemble/logger-graphql:read" } }
        { includes: { permissions: "admin" } }
        { includes: { permissions: "operations" } }
        { includes: { permissions: "operations:read" } }
      ]
    )
    @stream
  logLevel: LogLevel!
    @auth(
      or: [
        { includes: { permissions: "@zemble/logger-graphql" } }
        { includes: { permissions: "@zemble/logger-graphql:read" } }
        { includes: { permissions: "admin" } }
        { includes: { permissions: "operations" } }
        { includes: { permissions: "operations:read" } }
      ]
    )
}

type Subscription {
  logs(minLevel: LogLevel): LogOutput!
    @auth(
      or: [
        { includes: { permissions: "@zemble/logger-graphql" } }
        { includes: { permissions: "@zemble/logger-graphql:read" } }
        { includes: { permissions: "admin" } }
        { includes: { permissions: "operations" } }
        { includes: { permissions: "operations:read" } }
      ]
    )
}

type Mutation {
  setLogLevel(level: LogLevel!): LogLevel! @auth(or: [{ includes: { permissions: "@zemble/logger-graphql" } }, { includes: { permissions: "admin" } }, { includes: { permissions: "operations" } }])
}

type LogOutput {
  severity: String!
  message: String!
  timestamp: String!
}

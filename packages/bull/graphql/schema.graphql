scalar JSON
scalar DateTime

type BullJob {
  name: String!
  data: JSON
  id: ID!
  progress: Float
  state: JobState!
  timestamp: Int!
  delay: Int
  repeatJobKey: ID
}

enum JobState {
  completed
  failed
  active
  delayed
  prioritized
  waiting
  waiting_children
}

type RepeatableJob {
  key: ID!
  name: String!
  id: String
  endDate: Float
  tz: String
  pattern: String
  next: DateTime
}

type BullQueue {
  name: String!
  count: Int!
  completedCount: Int!
  activeCount: Int!
  waitingCount: Int!
  waitingChildrenCount: Int!
  failedCount: Int!
  delayedCount: Int!
  isPaused: Boolean!
  repeatableJobs(start: Int, end: Int, asc: Boolean): [RepeatableJob!]!
  jobs(type: [JobTypeOrState!], start: Int, end: Int, asc: Boolean): [BullJob!]!
}

enum JobTypeOrState {
  completed
  failed
  active
  delayed
  prioritized
  waiting
  waiting_children
  paused
  # repeat (probably doesn't make sense, since we have repeatableJobs for this)
  wait
}

type Query {
  queues: [BullQueue!]!
}

type Mutation {
  addJob(queue: String!, data: JSON, jobId: ID): BullJob!
  addRepeatableJob(queue: String!, data: JSON, repeatJobKey: ID, pattern: String!): BullJob!
  removeRepeatableJob(queue: String!, repeatJobKey: ID!): Boolean!
  drainQueue(queue: String!, delayed: Boolean): Boolean!
  cleanQueue(queue: String!, grace: Int!, type: CleanQueueType, limit: Int!): [ID!]!
  removeJob(queue: String!, jobId: ID!): Boolean!
}

enum CleanQueueType {
  completed
  wait
  active
  paused
  prioritized
  delayed
  failed
}

type Subscription {
  jobUpdated: BullJob!
}
